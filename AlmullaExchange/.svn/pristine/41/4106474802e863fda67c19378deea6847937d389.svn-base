package com.amg.exchange.daoimpl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.FetchMode;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.hibernate.sql.JoinType;
import org.springframework.stereotype.Repository;

import com.amg.exchange.dao.IGeneralDao;
import com.amg.exchange.model.BusinessComponent;
import com.amg.exchange.model.BussComponentConfDetail;
import com.amg.exchange.model.CityMaster;
import com.amg.exchange.model.CityMasterDesc;
import com.amg.exchange.model.CompanyMaster;
import com.amg.exchange.model.CompanyMasterDesc;
import com.amg.exchange.model.ContactType;
import com.amg.exchange.model.CountryMaster;
import com.amg.exchange.model.CountryMasterDesc;
import com.amg.exchange.model.DistrictMaster;
import com.amg.exchange.model.DistrictMasterDesc;
import com.amg.exchange.model.EmploymentType;
import com.amg.exchange.model.IdentityType;
import com.amg.exchange.model.NationalityMaster;
import com.amg.exchange.model.RuleApplicationMaster;
import com.amg.exchange.model.RulePageMaster;
import com.amg.exchange.model.StateMaster;
import com.amg.exchange.model.StateMasterDesc;

@Repository
public class GeneralDaoImpl<T>  extends CustomHibernateDaoSupport implements IGeneralDao<T> {
 
	@Override
	public void save(T entity) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void update(T entity) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void delete(T entity) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<T> findByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<T> findById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<T> findAll() {
		// TODO Auto-generated method stub
		return null;
	}
	
	/*public List<T> load(DetachedCriteria criteria){
		
		
		return criteria.getExecutableCriteria(getSession()).list();
	}*/

	@SuppressWarnings("unchecked")
	@Override
	public List<T> findAll(DetachedCriteria criteria) {

		return criteria.getExecutableCriteria(getSession()).list();
	}

	@Override
	public List<NationalityMaster> getNationality() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<CityMaster> getCity(BigDecimal districtId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<CountryMaster> getCountry() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<StateMaster> getState() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<CompanyMaster> getCompany(BigDecimal countryId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<StateMaster> getState(BigDecimal countryId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<DistrictMaster> getDistrict(BigDecimal stateId) {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<CountryMasterDesc> getCountryList(BigDecimal languageId) {

		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(CountryMasterDesc.class,"countryMasterDesc");
		
		// Join Language Type table
		detachedCriteria.setFetchMode("countryMasterDesc.fsLanguageType", FetchMode.JOIN);
		detachedCriteria.createAlias("countryMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		
		// Add Language Condition
		detachedCriteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		// Join Country Master Table
		detachedCriteria.setFetchMode("countryMasterDesc.fsCountryMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("countryMasterDesc.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
		
		// Join Rule Application Description Table
		/*detachedCriteria.setFetchMode("fsCountryMaster.fsRuleApplicationDescs", FetchMode.JOIN);
		detachedCriteria.createAlias("fsCountryMaster.fsRuleApplicationDescs", "fsRuleApplicationDescs", CriteriaSpecification.INNER_JOIN);*/
		
		detachedCriteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
		
		return (List<CountryMasterDesc>)findAll(detachedCriteria);
	}

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<CountryMasterDesc> getNationalityList(BigDecimal languageId) {
		
		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(CountryMasterDesc.class,"countryMasterDesc");
		
		// Join Language Type table
		detachedCriteria.setFetchMode("countryMasterDesc.fsLanguageType", FetchMode.JOIN);
		detachedCriteria.createAlias("countryMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		
		// Add Language Condition
		detachedCriteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		
		// Join Country Master Table
		detachedCriteria.setFetchMode("countryMasterDesc.fsCountryMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("countryMasterDesc.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
		detachedCriteria.add(Restrictions.isNotNull("countryMasterDesc.nationality"));
		// Join Rule Application Description Table
		/*detachedCriteria.setFetchMode("fsCountryMaster.fsRuleApplicationDescs", FetchMode.JOIN);
		detachedCriteria.createAlias("fsCountryMaster.fsRuleApplicationDescs", "fsRuleApplicationDescs", CriteriaSpecification.INNER_JOIN);*/
		
		detachedCriteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
		
		return (List<CountryMasterDesc>)findAll(detachedCriteria);
	}

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<StateMasterDesc> getStateList(BigDecimal languageId, BigDecimal countryId) {

		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(StateMasterDesc.class,"stateMasterDesc");
		
		// Join FS_LANGUAGE_TYPE table
		detachedCriteria.setFetchMode("stateMasterDesc.fsLanguageType", FetchMode.JOIN);
		detachedCriteria.createAlias("stateMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		
		// Add FS_LANGUAGE_TYPE Condition
		detachedCriteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		// Join FS_STATE_MASTER table
		detachedCriteria.setFetchMode("stateMasterDesc.fsStateMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("stateMasterDesc.fsStateMaster", "fsStateMaster", CriteriaSpecification.INNER_JOIN);
		
		// Join FS_COUNTRY_MASTER table
		detachedCriteria.setFetchMode("fsStateMaster.fsCountryMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("fsStateMaster.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
		
		// Add FS_COUNTRY_MASTER Filter Condition
		detachedCriteria.add(Restrictions.eq("fsCountryMaster.countryId", countryId));
		
		detachedCriteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
		
		return (List<StateMasterDesc>)findAll(detachedCriteria);
	}

	@SuppressWarnings({ "unchecked", "deprecation" })
	@Override
	public List<DistrictMasterDesc> getDistrictList(BigDecimal languageId, BigDecimal countryId, BigDecimal stateId) {

		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(DistrictMasterDesc.class,"districtMasterDesc");
		
		// Join FS_LANGUAGE_TYPE table
		detachedCriteria.setFetchMode("districtMasterDesc.fsLanguageType", FetchMode.JOIN);
		detachedCriteria.createAlias("districtMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		
		// Add FS_LANGUAGE_TYPE Condition
		detachedCriteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		// Join FS_DISTRICT_MASTER table
		detachedCriteria.setFetchMode("districtMasterDesc.fsDistrictMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("districtMasterDesc.fsDistrictMaster", "fsDistrictMaster", CriteriaSpecification.INNER_JOIN);
		
		// Join FS_STATE_MASTER table
		detachedCriteria.setFetchMode("fsDistrictMaster.fsStateMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("fsDistrictMaster.fsStateMaster", "fsStateMaster", CriteriaSpecification.INNER_JOIN);
		
		// Add FS_LANGUAGE_TYPE Condition
		detachedCriteria.add(Restrictions.eq("fsStateMaster.stateId", stateId));
		
		// Join FS_COUNTRY_MASTER table
		detachedCriteria.setFetchMode("fsStateMaster.fsCountryMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("fsStateMaster.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
		
		// Add FS_COUNTRY_MASTER Filter Condition
		detachedCriteria.add(Restrictions.eq("fsCountryMaster.countryId", countryId));
		
		detachedCriteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
		
		return (List<DistrictMasterDesc>)findAll(detachedCriteria);
	}

	@SuppressWarnings({ "deprecation", "unchecked" }) 
	@Override
	public List<CityMasterDesc> getCityList(BigDecimal languageId, BigDecimal countryId, BigDecimal stateId, BigDecimal districtId) {
		
		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(CityMasterDesc.class,"cityMasterDesc");

		// Join FS_LANGUAGE_TYPE table
		detachedCriteria.setFetchMode("cityMasterDesc.fsLanguageType", FetchMode.JOIN);
		detachedCriteria.createAlias("cityMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);

		// Add FS_LANGUAGE_TYPE Condition
		detachedCriteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		// Join FS_CITY_MASTER table
		detachedCriteria.setFetchMode("cityMasterDesc.fsCityMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("cityMasterDesc.fsCityMaster", "fsCityMaster", CriteriaSpecification.INNER_JOIN);
		
		// Join FS_DISTRICT_MASTER table
		detachedCriteria.setFetchMode("fsCityMaster.fsDistrictMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("fsCityMaster.fsDistrictMaster", "fsDistrictMaster", CriteriaSpecification.INNER_JOIN);

		// Add FS_LANGUAGE_TYPE Condition
		detachedCriteria.add(Restrictions.eq("fsDistrictMaster.districtId", districtId));

		// Join FS_STATE_MASTER table
		detachedCriteria.setFetchMode("fsDistrictMaster.fsStateMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("fsDistrictMaster.fsStateMaster", "fsStateMaster", CriteriaSpecification.INNER_JOIN);

		// Add FS_LANGUAGE_TYPE Condition
		detachedCriteria.add(Restrictions.eq("fsStateMaster.stateId", stateId));

		// Join FS_COUNTRY_MASTER table
		detachedCriteria.setFetchMode("fsStateMaster.fsCountryMaster", FetchMode.JOIN);
		detachedCriteria.createAlias("fsStateMaster.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
		
		// Add FS_COUNTRY_MASTER Filter Condition
		detachedCriteria.add(Restrictions.eq("fsCountryMaster.countryId", countryId));
		
		detachedCriteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
			
		return (List<CityMasterDesc>)findAll(detachedCriteria);
	}

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<ContactType> getContactTypes(BigDecimal languageId) {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(ContactType.class, "contactType");
			criteria.setFetchMode("contactType.fsLanguageType", FetchMode.JOIN);
			criteria.createAlias("contactType.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
			
			// Add FS_LANGUAGE_TYPE Condition
			criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
			criteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
			
		return (List<ContactType>)findAll(criteria);
	}

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<EmploymentType> getEmploymentTypes(BigDecimal languageId) {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(EmploymentType.class, "employmentType");
			criteria.setFetchMode("employmentType.fsLanguageType", FetchMode.JOIN);
			criteria.createAlias("employmentType.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
			
			criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
			
			criteria.addOrder(Order.asc("employmentType.employmentTypeId"));
		
		return (List<EmploymentType>)findAll(criteria);
	}

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<IdentityType> getIdentityTypes(BigDecimal languageId, BigDecimal countryId) {

		DetachedCriteria criteria = DetachedCriteria.forClass(IdentityType.class, "identityType");

		criteria.setFetchMode("identityType.fsLanguageType", FetchMode.JOIN);
		criteria.createAlias("identityType.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));

		criteria.setFetchMode("identityType.fsCountryMaster", FetchMode.JOIN);
		criteria.createAlias("identityType.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
		criteria.add(Restrictions.eq("fsCountryMaster.countryId", countryId));
		
		criteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
		
		return (List<IdentityType>)findAll(criteria);
	}

	
	@SuppressWarnings({ "deprecation", "unchecked" })
	 @Override
	 public List<IdentityType> getIdentityTypes(BigDecimal languageId, BigDecimal countryId, BigDecimal customerTypeId) {

	  DetachedCriteria criteria = DetachedCriteria.forClass(IdentityType.class, "identityType");
	  
	  criteria.setFetchMode("identityType.fsLanguageType", FetchMode.JOIN);
	  criteria.createAlias("identityType.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
	  criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
	  
	  criteria.setFetchMode("identityType.fsCountryMaster", FetchMode.JOIN);
	  criteria.createAlias("identityType.fsCountryMaster", "fsCountryMaster", CriteriaSpecification.INNER_JOIN);
	  criteria.add(Restrictions.eq("fsCountryMaster.countryId", countryId));
	  
	  criteria.setFetchMode("identityType.fsCustomerType", FetchMode.JOIN);
	  criteria.createAlias("identityType.fsCustomerType", "fsCustomerType", CriteriaSpecification.INNER_JOIN);
	  criteria.add(Restrictions.eq("fsCustomerType.customerTypeId", customerTypeId));
	  
	  criteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
	  
	  
	  return (List<IdentityType>)findAll(criteria);
	 }

	@SuppressWarnings({ "deprecation", "unchecked" })
	@Override
	public List<StateMasterDesc> getStateList(BigDecimal languageId) {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(StateMasterDesc.class, "stateMasterDesc");
		
		criteria.setFetchMode("stateMasterDesc.fsLanguageType", FetchMode.JOIN);
		criteria.createAlias("stateMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		criteria.setFetchMode("stateMasterDesc.fsStateMaster", FetchMode.JOIN);
		criteria.createAlias("stateMasterDesc.fsStateMaster", "fsStateMaster", CriteriaSpecification.INNER_JOIN);
		  
		return (List<StateMasterDesc>)findAll(criteria);
	}

	@Override
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<DistrictMasterDesc> getDistrictList(BigDecimal languageId) {

		DetachedCriteria criteria = DetachedCriteria.forClass(DistrictMasterDesc.class, "districtMasterDesc");
		
		criteria.setFetchMode("districtMasterDesc.fsLanguageType", FetchMode.JOIN);
		criteria.createAlias("districtMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		criteria.setFetchMode("districtMasterDesc.fsDistrictMaster", FetchMode.JOIN);
		criteria.createAlias("districtMasterDesc.fsDistrictMaster", "fsDistrictMaster", CriteriaSpecification.INNER_JOIN);
		  
		return (List<DistrictMasterDesc>)findAll(criteria);
	}

	@Override
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<CityMasterDesc> getCityList(BigDecimal languageId) {

		DetachedCriteria criteria = DetachedCriteria.forClass(CityMasterDesc.class, "cityMasterDesc");
		
		criteria.setFetchMode("cityMasterDesc.fsLanguageType", FetchMode.JOIN);
		criteria.createAlias("cityMasterDesc.fsLanguageType", "fsLanguageType", CriteriaSpecification.INNER_JOIN);
		criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		criteria.setFetchMode("cityMasterDesc.fsCityMaster", FetchMode.JOIN);
		criteria.createAlias("cityMasterDesc.fsCityMaster", "fsCityMaster", CriteriaSpecification.INNER_JOIN);
		  
		return (List<CityMasterDesc>)findAll(criteria);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<BusinessComponent> getAllComponentList() {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(BusinessComponent.class, "businessComponent");
		
		criteria.setFetchMode("businessComponent.fsComponentType", FetchMode.JOIN);
		criteria.createAlias("businessComponent.fsComponentType", "fsComponentType", JoinType.INNER_JOIN);
		
		criteria.add(Restrictions.eq("businessComponent.isActive", "Y"));
		criteria.addOrder(Order.asc("businessComponent.componentName"));
		
		return (List<BusinessComponent>)findAll(criteria);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<RuleApplicationMaster> getAllApplicationList() {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(RuleApplicationMaster.class, "ruleApplicationMaster");
		
		criteria.addOrder(Order.asc("ruleApplicationMaster.applicationName"));

		return (List<RuleApplicationMaster>)findAll(criteria);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CompanyMasterDesc> getAllCompanyList(BigDecimal languageId) {

		DetachedCriteria criteria = DetachedCriteria.forClass(CompanyMasterDesc.class, "companyMasterDesc");
		
		criteria.setFetchMode("companyMasterDesc.fsCompanyMaster", FetchMode.JOIN);
		criteria.createAlias("companyMasterDesc.fsCompanyMaster", "fsCompanyMaster", JoinType.INNER_JOIN);

		criteria.setFetchMode("companyMasterDesc.fsLanguageType", FetchMode.JOIN);
		criteria.createAlias("companyMasterDesc.fsLanguageType", "fsLanguageType", JoinType.INNER_JOIN);
		criteria.add(Restrictions.eq("fsLanguageType.languageId", languageId));
		
		criteria.addOrder(Order.asc("companyMasterDesc.companyName"));

		return (List<CompanyMasterDesc>)findAll(criteria);
	}

	@SuppressWarnings("unchecked") 
	@Override
	public List<RulePageMaster> getAllPageList() {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(RulePageMaster.class, "rulePageMaster");
		criteria.addOrder(Order.asc("rulePageMaster.pageName"));
		
		return (List<RulePageMaster>)findAll(criteria);
	}

	@SuppressWarnings("unchecked")
	@Override
	public BigDecimal getPageId(String pageName) {
		
		DetachedCriteria criteria = DetachedCriteria.forClass(RulePageMaster.class, "rulePageMaster");
		criteria.add(Restrictions.eq("rulePageMaster.pageCode", pageName));
		
		return ((List<RulePageMaster>)findAll(criteria)).get(0).getPageId();
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, BussComponentConfDetail> getComponentBehavior(
			List<String> componentList, BigDecimal levelId, BigDecimal applicationId, BigDecimal companyId, BigDecimal countryId, BigDecimal pageId) {
		
		String alias = "fsbusiness1_";
		Map<String,BussComponentConfDetail> mapReturn = new HashMap<String, BussComponentConfDetail>();

		DetachedCriteria criteria = DetachedCriteria.forClass(BussComponentConfDetail.class, "bussComponentConfDetail");
		
		criteria.setFetchMode("bussComponentConfDetail.fsBusinessComponentConf", FetchMode.JOIN);
		criteria.createAlias("bussComponentConfDetail.fsBusinessComponentConf", "fsBusinessComponentConf", JoinType.INNER_JOIN);

		criteria.setFetchMode("fsBusinessComponentConf.fsBusinessComponent", FetchMode.JOIN);
		criteria.createAlias("fsBusinessComponentConf.fsBusinessComponent", "fsBusinessComponent", JoinType.INNER_JOIN);


		//Left join Application Master
		criteria.setFetchMode("fsBusinessComponentConf.fsRuleApplicationMaster", FetchMode.JOIN);
		criteria.createAlias("fsBusinessComponentConf.fsRuleApplicationMaster", "fsRuleApplicationMaster", JoinType.LEFT_OUTER_JOIN);

		//Left join Company Master
		criteria.setFetchMode("fsBusinessComponentConf.fsCompanyMaster", FetchMode.JOIN);
		criteria.createAlias("fsBusinessComponentConf.fsCompanyMaster", "fsCompanyMaster", JoinType.LEFT_OUTER_JOIN);

		//Left join Country Master
		criteria.setFetchMode("fsBusinessComponentConf.fsCountryMaster", FetchMode.JOIN);
		criteria.createAlias("fsBusinessComponentConf.fsCountryMaster", "fsCountryMaster", JoinType.LEFT_OUTER_JOIN);
		
		//Left join page master
		criteria.setFetchMode("fsBusinessComponentConf.fsRulePageMaster", FetchMode.JOIN);
		criteria.createAlias("fsBusinessComponentConf.fsRulePageMaster", "fsRulePageMaster", JoinType.LEFT_OUTER_JOIN);
		
		
		criteria.add(Restrictions.in("fsBusinessComponent.componentName", componentList));  
		
		
		StringBuilder sbf = new StringBuilder("(CASE ").append(alias).append(".LEVEL_ID "); 
		
		sbf.append(" WHEN 0 THEN 1");
		sbf.append(" WHEN 1 THEN (CASE WHEN ").append(alias).append(".PAGE_ID=").append(pageId.intValue()).append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 2 THEN (CASE WHEN ").append(alias).append(".COUNTRY_ID=").append(countryId.intValue()).append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 3 THEN (CASE WHEN ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 4 THEN (CASE WHEN ").append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 5 THEN (CASE WHEN ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 6 THEN (CASE WHEN ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" AND ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 7 THEN (CASE WHEN ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" AND ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 8 THEN (CASE WHEN ").append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 9 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 10 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 11 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 12 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 13 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 14 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" AND ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append(" WHEN 15 THEN (CASE WHEN ")
			.append(alias).append(".APPLICATION_ID=").append(applicationId.intValue()).append(" AND ")
			.append(alias).append(".COMPANY_ID=").append(companyId.intValue()).append(" AND ")
			.append(alias).append(".COUNTRY_ID=").append(countryId.intValue()).append(" AND ")
			.append(alias).append(".PAGE_ID=").append(pageId.intValue())
			.append(" THEN 1 ELSE 0 END)");
		sbf.append("ELSE 1 END)=1");
		criteria.add(Restrictions.sqlRestriction(sbf.toString()));
		criteria.addOrder(Order.desc("fsBusinessComponentConf.levelId"));
		
		
		List<BussComponentConfDetail> lst = null;
		
		try{
			/*criteria.getExecutableCriteria(getSession()).setCacheable(true);*/
			
			lst =  (List<BussComponentConfDetail>)findAll(criteria);
			for(BussComponentConfDetail bean:lst){
				if(mapReturn.containsKey(bean.getFsBusinessComponentConf().getFsBusinessComponent().getComponentName())){}else{
					mapReturn.put(bean.getFsBusinessComponentConf().getFsBusinessComponent().getComponentName(), bean);
				}
			}
		}catch(Exception e){
			e.printStackTrace();
			//Logger.getLogger(this.getClass()).log(Level.ERROR, "Component List "+componentList+" behaviour not available !" , null);
		}
		
		return mapReturn;
	} 
	
}
